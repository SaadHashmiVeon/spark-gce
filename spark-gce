#!/usr/bin/env python

try:
    import spark_gce
except ImportError as e:
    print("Unable to import the spark_gce python package, this is likely due to an incorrect PYTHONPATH or missing dependencies.\nGot the following error during import:\n%s" % e)
    sys.exit()
except SyntaxError as e:
    print("Unable to import the spark_gce python package, got the following syntax error:\n%s" % e)
    sys.exit()
except:
    print("Unable to import the spark_gce python package for unknown reasons, got the following error:\n%s" % e)
    sys.exit()


if __name__ == "__main__":
    from spark_gce import real_main

    print "Spark for Google Compute Engine v" + spark_gce.__version__
    print ""

    # Read the arguments
    (opts, action, cluster_name, optional_arg) = parse_args()

    # Make sure gcloud is accessible.
    check_gcloud(cluster_name, opts)

    # Launch the cluster
    if action == "launch":
        launch_cluster(cluster_name, opts)

    elif action == "start":
        start_cluster(cluster_name, opts)

    elif action == "stop":
        stop_cluster(cluster_name, opts)

    elif action == "stop-slaves":
        print "\n\nStopping slave nodes, but leaving the master node running. NOTE: you must
        run 'spark-gce stop' before restarting the cluster!\n\n"
        stop_cluster(cluster_name, opts, slaves_only =
        True)

    elif action == "destroy":
        destroy_cluster(cluster_name, opts)

    elif action == "login" or action == "ssh":
        ssh_cluster(cluster_name, opts)

    elif action == "mosh":
        mosh_cluster(cluster_name, opts)

    elif action == "sshfs":
        sshfs_cluster(cluster_name, opts, optional_arg)

    else:
        print >> stderr, "Invalid action: %s" % action
        sys.exit(1)
